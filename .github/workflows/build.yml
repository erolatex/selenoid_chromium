name: Build and Push Docker Image

on:
  schedule:
    - cron: '0 0 * * *'  # Daily job
  workflow_dispatch:  # Manual trigger

jobs:
  check_chromium_version:
    runs-on: ubuntu-22.04

    steps:
      # Setup the environment
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:xtradeb/apps
          sudo apt-get update

      # Create cache directory if not exists
      - name: Create cache directory
        run: mkdir -p ./cache

      # Restore the last cached Chromium version
      - name: Restore last Chromium version from cache
        id: cache_last_version
        uses: actions/cache@v3
        with:
          path: ./cache/current_chromium_version.txt
          key: chromium-version-cache

      # Fetch the latest Chromium version
      - name: Check Chromium Version
        id: get_full_version
        run: |
          apt-cache madison chromium | grep xtradeb/apps | awk '{print $3}' > ./cache/current_chromium_version.txt
          echo "full_version=$(cat ./cache/current_chromium_version.txt)" >> $GITHUB_ENV

      # Extract the short version (major.minor)
      - name: Extract Short Version
        id: get_short_version
        run: |
          awk -F '.' '{print $1 "." $2}' ./cache/current_chromium_version.txt > ./cache/short_chromium_version.txt
          echo "short_version=$(cat ./cache/short_chromium_version.txt)" >> $GITHUB_ENV

      # Compare current Chromium version with the last cached one
      - name: Compare with the last version
        id: compare_versions
        run: |
          if [ ! -f ./cache/last_chromium_version.txt ]; then
            echo "No previous version found. Proceeding with build."
            echo "build_required=true" >> $GITHUB_ENV
          else
            if diff ./cache/last_chromium_version.txt ./cache/current_chromium_version.txt > /dev/null; then
              echo "Chromium version has not changed. Skipping build."
              echo "build_required=false" >> $GITHUB_ENV
            else
              echo "Chromium version has been updated."
              echo "build_required=true" >> $GITHUB_ENV
            fi
          fi

      # Save the current Chromium version in the cache
      - name: Cache the current Chromium version
        uses: actions/cache@v3
        with:
          path: ./cache/current_chromium_version.txt
          key: chromium-version-cache-${{ github.run_id }}

      # Post-action cache save
      - name: Post Cache the current Chromium version
        if: always()
        run: |
          tar --posix -cf cache.tzst --exclude cache.tzst -P -C ./cache current_chromium_version.txt
          echo "Cache saved"

  build_and_push:
    needs: check_chromium_version
    runs-on: ubuntu-22.04
    if: ${{ env.build_required == 'true' }}

    steps:
      # Clone the Dockerfile repository
      - name: Clone Dockerfile Repository
        uses: actions/checkout@v2
        with:
          repository: erolatex/selenoid_chromium
          path: images/static/chromium

      # Set up Docker Buildx for cross-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Log in to Docker Hub using environment secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker image
      - name: Build and Push Docker Image
        run: |
          cd images/static/chromium
          docker buildx build --no-cache --build-arg BASE_IMAGE_TAG=1.0.1 \
            --platform linux/amd64,linux/arm64 \
            -t erolatex/selenoid_chromium:${{ env.short_version }} \
            -t erolatex/selenoid_chromium:latest \
            --push .

      # Post Docker login action
      - name: Post Log in to Docker Hub
        if: always()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
